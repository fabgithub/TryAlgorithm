//
//  main.cpp
//  YangHuiExtend
//
//  Created by liyoudi on 20131113.
//  Copyright (c) 2013年 liyoudi. All rights reserved.
//

#include <iostream>
#include <list>
#include <set>

/*

 ___________________________________________________________1
 __________________________________________________________111
 _________________________________________________________1_1_1
 ________________________________________________________11_1_11
 _______________________________________________________1___1___1
 ______________________________________________________111_111_111
 _____________________________________________________1_1___1___1_1
 ____________________________________________________11_11_111_11_11
 ___________________________________________________1_______1_______1
 __________________________________________________111_____111_____111
 _________________________________________________1_1_1___1_1_1___1_1_1
 ________________________________________________11_1_11_11_1_11_11_1_11
 _______________________________________________1___1_______1_______1___1
 ______________________________________________111_111_____111_____111_111
 _____________________________________________1_1___1_1___1_1_1___1_1___1_1
 ____________________________________________11_11_11_11_11_1_11_11_11_11_11
 ___________________________________________1_______________1_______________1
 __________________________________________111_____________111_____________111
 _________________________________________1_1_1___________1_1_1___________1_1_1
 ________________________________________11_1_11_________11_1_11_________11_1_11
 _______________________________________1___1___1_______1___1___1_______1___1___1
 ______________________________________111_111_111_____111_111_111_____111_111_111
 _____________________________________1_1___1___1_1___1_1___1___1_1___1_1___1___1_1
 ____________________________________11_11_111_11_11_11_11_111_11_11_11_11_111_11_11
 ___________________________________1_______1_______________1_______________1_______1
 __________________________________111_____111_____________111_____________111_____111
 _________________________________1_1_1___1_1_1___________1_1_1___________1_1_1___1_1_1
 ________________________________11_1_11_11_1_11_________11_1_11_________11_1_11_11_1_11
 _______________________________1___1_______1___1_______1___1___1_______1___1_______1___1
 ______________________________111_111_____111_111_____111_111_111_____111_111_____111_111
 _____________________________1_1___1_1___1_1___1_1___1_1___1___1_1___1_1___1_1___1_1___1_1
 ____________________________11_11_11_11_11_11_11_11_11_11_111_11_11_11_11_11_11_11_11_11_11
 ___________________________1_______________________________1_______________________________1
 __________________________111_____________________________111_____________________________111
 _________________________1_1_1___________________________1_1_1___________________________1_1_1
 ________________________11_1_11_________________________11_1_11_________________________11_1_11
 _______________________1___1___1_______________________1___1___1_______________________1___1___1
 ______________________111_111_111_____________________111_111_111_____________________111_111_111
 _____________________1_1___1___1_1___________________1_1___1___1_1___________________1_1___1___1_1
 ____________________11_11_111_11_11_________________11_11_111_11_11_________________11_11_111_11_11
 ___________________1_______1_______1_______________1_______1_______1_______________1_______1_______1
 __________________111_____111_____111_____________111_____111_____111_____________111_____111_____111
 _________________1_1_1___1_1_1___1_1_1___________1_1_1___1_1_1___1_1_1___________1_1_1___1_1_1___1_1_1
 ________________11_1_11_11_1_11_11_1_11_________11_1_11_11_1_11_11_1_11_________11_1_11_11_1_11_11_1_11
 _______________1___1_______1_______1___1_______1___1_______1_______1___1_______1___1_______1_______1___1
 ______________111_111_____111_____111_111_____111_111_____111_____111_111_____111_111_____111_____111_111
 _____________1_1___1_1___1_1_1___1_1___1_1___1_1___1_1___1_1_1___1_1___1_1___1_1___1_1___1_1_1___1_1___1_1
 ____________11_11_11_11_11_1_11_11_11_11_11_11_11_11_11_11_1_11_11_11_11_11_11_11_11_11_11_1_11_11_11_11_11
 ___________1_______________1_______________________________1_______________________________1_______________1
 __________111_____________111_____________________________111_____________________________111_____________111
 _________1_1_1___________1_1_1___________________________1_1_1___________________________1_1_1___________1_1_1
 ________11_1_11_________11_1_11_________________________11_1_11_________________________11_1_11_________11_1_11
 _______1___1___1_______1___1___1_______________________1___1___1_______________________1___1___1_______1___1___1
 ______111_111_111_____111_111_111_____________________111_111_111_____________________111_111_111_____111_111_111
 _____1_1___1___1_1___1_1___1___1_1___________________1_1___1___1_1___________________1_1___1___1_1___1_1___1___1_1
 ____11_11_111_11_11_11_11_111_11_11_________________11_11_111_11_11_________________11_11_111_11_11_11_11_111_11_11
 ___1_______1_______________1_______1_______________1_______1_______1_______________1_______1_______________1_______1
 __111_____111_____________111_____111_____________111_____111_____111_____________111_____111_____________111_____111
 _1_1_1___1_1_1___________1_1_1___1_1_1___________1_1_1___1_1_1___1_1_1___________1_1_1___1_1_1___________1_1_1___1_1_1
 */
size_t nMaxSetSize = 0;

class PosInfo
{
public:
    PosInfo(int n, int m) : first(n), second(m) {}
    int first, second;
    std::list<PosInfo *>::iterator posInList;
    static PosInfo * Get(int n, int m)
    {
        return new PosInfo(n, m);
    }
};

class PosInfoLess
{
public:
    bool operator () (const PosInfo *p1, const PosInfo *p2) const
    {
        if(p1->first < p2->first)
            return true;
        else if(p1->first > p2->first)
            return false;
        return p1->second < p2->second;
    }
};

// 判断在n, m位置是否是奇数.
bool IsOdd(int n, int m)
{
    typedef std::set<PosInfo *, PosInfoLess> UnknownPos; //
    typedef std::list<PosInfo *> PosList;
    PosList posList;
    bool bIsOdd = false;
    if (m == 0) {
        return true;
    }
    UnknownPos unknown;
    unknown.insert(PosInfo::Get(n, m));
    posList.push_back(PosInfo::Get(n, m));
    while (!unknown.empty() && !posList.empty())
    {
        PosInfo *ptmp = posList.front();
        posList.pop_front();
        unknown.erase(ptmp);
        if(ptmp->first > 0)
        {
            if(ptmp->second == ptmp->first - 1)
            {
                bIsOdd = !bIsOdd;
            }
            else if(ptmp->second == 1 - ptmp->first || ptmp->second == 0)
            {
                bIsOdd = !bIsOdd;
            }
            else if(ptmp->second < ptmp->first - 1 && ptmp->second > 1 - ptmp->first)
            {
                int nLine = ptmp->first - 1;
                int nPos  = ptmp->second - 1;
                for (; nPos <= ptmp->second + 1; ++nPos)
                {
                    if (nPos == 0) {
                        bIsOdd = !bIsOdd;
                        continue;
                    }
                    if(nPos < 1 - nLine || nPos > nLine - 1)
                    {
                        continue;
                    }
                    PosInfo *newOne = PosInfo::Get(nLine, nPos);
                    UnknownPos::iterator iterFound = unknown.find(newOne);
                    if (iterFound != unknown.end())
                    {
                        (*iterFound)->first = -1;
                        unknown.erase(iterFound);
                        posList.erase((*iterFound)->posInList);
                    }
                    else
                    {
//                        posList.push_back(newOne);
                        newOne->posInList = posList.insert(posList.end(), newOne);
                        unknown.insert(newOne);
                        if(nMaxSetSize < posList.size())
                        {
                            nMaxSetSize = posList.size();
                        }
//                        std::cout << "insert(" << nLine << ", " << nPos << ")'" << std::endl;
                    }
                }
            }
        }
        delete ptmp;
    }
    return bIsOdd;
}

int FirstNonOddPos(int n)
{
    if (n <= 2) {
        return -1;
    }
    else if(n % 2)
    {
        return 2;
    }
    else if (n % 4)
    {
        return 4;
    }
    return 3;
}
